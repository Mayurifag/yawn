{
    "Climb": "yawn-enhancements-v2",
    "moves": [
        {
            "status": "todo",
            "description": "Update default Gemini API stream initiation timeout and model configurations",
            "details": "In `internal/config/config.go`: change `DefaultTimeoutSecs` from `10` to `15` (this now represents stream initiation timeout). Update `DefaultGeminiModel` to `\"gemini-1.5-flash-preview-0827\"` (AI assistant to verify the latest available Gemini 1.5 Flash preview model identifier from SDK/documentation and use it). Add `DefaultFallbackGeminiModel` constant set to `\"gemini-1.5-flash-latest\"` (AI assistant to verify the stable/latest identifier for Gemini 1.5 Flash, e.g., `\"gemini-1.5-flash\"`). Add `FallbackGeminiModel string \`toml:\\\"fallback_gemini_model\\\"\` to the `Config` struct. Update `defaultConfig()` to include `FallbackGeminiModel: DefaultFallbackGeminiModel`. Update `GenerateConfigContent` and `GenerateDefaultConfig` to include `fallback_gemini_model`. Update `applyEnvConfig` (env key `YAWN_FALLBACK_GEMINI_MODEL`) and `mergeConfig` (toml key `fallback_gemini_model`) to handle the new `FallbackGeminiModel` field. Ensure the `sources` map is correctly updated for `FallbackGeminiModel`. Update related tests in `internal/config/config_test.go` to reflect these changes, including testing the new fallback model configuration layer. The timeout value in `yawn --generate-config` output should reflect 15s.",
            "rules_filepaths_to_follow": "`internal/config/go.mdc`",
            "filepaths_to_modify": "`internal/config/config.go,internal/config/config_test.go`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Implement streaming commit message generation and fallback logic in Gemini client",
            "details": "In `internal/gemini/client.go`: Modify `Client` interface to add `GenerateCommitMessageStream(ctx context.Context, model, promptTemplate, diff string, maxTokens int, temperature float32) (*genai.GenerateContentResponseIterator, error)`. Implement this method in `GenaiClient`. It should use `model.GenerateContentStream()`. The passed `ctx` will have the 15s stream initiation timeout. Modify `GenerateCommitMessage` to be a wrapper that calls `GenerateCommitMessageStream` and collects the full response, OR refactor `app.go` to call the stream method directly (prefer direct call from app.go). Implement fallback logic: if `GenerateCommitMessageStream` with the primary model fails due to a stream initiation timeout (context deadline exceeded before first part), specific HTTP 5xx errors, or persistent rate limits, and `Config.FallbackGeminiModel` is set, it should attempt the call again using the fallback model. Clearly indicate in `GeminiError` or return values if fallback was used. Update `MockGeminiClient` for streaming. Add tests in `internal/gemini/client_test.go` for successful streaming, stream initiation timeout, and fallback scenarios. Ensure error handling in `handleGenerateContentError` and `processGenaiResponse` is compatible with streaming.",
            "rules_filepaths_to_follow": "`internal/config/go.mdc`",
            "filepaths_to_modify": "`internal/gemini/client.go,internal/gemini/client_test.go`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Update application logic to use streaming output and handle fallback",
            "details": "In `internal/app/app.go`: Modify `generateAndCommitChanges` to call the new streaming Gemini client method (e.g., `GenerateCommitMessageStream`). When the stream starts, stop the initial spinner (`ui.StartSpinner(\"Generating commit message...\")`). Print each part of the streamed commit message directly to the console as it arrives. Do not print a \"Commit message received.\" message after completion. If a fallback model was used by the Gemini client, inform the user with `ui.PrintInfo(\"Primary model failed, used fallback model: [fallback_model_name]\")`. Ensure the 15s stream initiation timeout (from `Config.GetRequestTimeout()`) is correctly passed to the Gemini client. Update tests in `internal/app/app_test.go` to mock and verify streaming behavior and fallback notifications.",
            "rules_filepaths_to_follow": "`internal/config/go.mdc`",
            "filepaths_to_modify": "`internal/app/app.go,internal/app/app_test.go`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Remove verbose mode entirely",
            "details": "Remove the `flagVerbose` flag from `cmd/yawn/main.go` and all its usages. Remove the `Verbose` field from `config.Config` in `internal/config/config.go`, remove `DefaultVerbose`, and remove all handling of `verbose` from TOML parsing, environment variable loading (`YAWN_VERBOSE`), flag application, and config generation. Remove all `if cfg.Verbose` blocks and `cfg.Verbose` checks from `internal/app/app.go`, `internal/git/git.go`, and `internal/config/config.go` (especially `logConfigLoadingSummary` and `logConfigSources` which should be removed). Update `internal/config/config_test.go` extensively to remove all tests related to the verbose flag and its layering. Update `README.md` to remove any mention of verbose mode.",
            "rules_filepaths_to_follow": "`internal/config/go.mdc,internal/config/md.mdc`",
            "filepaths_to_modify": "`cmd/yawn/main.go,internal/config/config.go,internal/config/config_test.go,internal/app/app.go,internal/git/git.go,README.md`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Enhance default prompt for better change identification",
            "details": "In `internal/config/config.go`, modify the `DefaultPrompt` string. Specifically, revise the instruction for writing the description. Change the existing description guidance to:\n```\n- The description MUST be a concise summary of THE MOST SIGNIFICANT CHANGE OR THE OVERALL GOAL of the commit. Explain WHAT the primary change is and WHY it was made. Focus on the single most impactful alteration if multiple unrelated changes exist. Use strong action verbs and specific nouns directly from the diff content. For version updates, the description should mention the library/model and the fact it's an update (e.g., \\\"update Gemini model to 1.5-flash-preview\\\"); full version details belong in the body.\n```\nEnsure the rest of the prompt structure (Conventional Commits, types, scope, body, examples, no gitmoji, etc.) remains intact.",
            "rules_filepaths_to_follow": "`internal/config/go.mdc`",
            "filepaths_to_modify": "`internal/config/config.go`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Create Go utility script for updating user config settings",
            "details": "Create a new Go program at `scripts/configure_settings/main.go`. This script will accept command-line flags to set specific configurations in the user's `~/.config/yawn/config.toml` file. Initially, it needs a flag, e.g., `--set-auto-push=<true|false>`, to control the `auto_push` setting. The script should: 1. Define flags for settings to be modified. 2. Determine the user config file path. 3. Ensure the config directory exists. 4. Load the existing TOML file into a `map[string]interface{}` if it exists, or start with an empty map. 5. Update the map with values from provided flags. 6. Encode the map back to TOML and write it to the user config file, preserving existing settings not targeted by flags. Print a success message. Add the `scripts/` directory and its contents to `.gitignore` if not already covered.",
            "rules_filepaths_to_follow": "`internal/config/go.mdc`",
            "filepaths_to_modify": "`scripts/configure_settings/main.go,.gitignore`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Add Makefile command to apply preferred user settings",
            "details": "In `Makefile`, add a new target, e.g., `configure-user-settings`. This target should execute the Go utility script created in the previous move using `go run ./scripts/configure_settings/main.go --set-auto-push=true`. Ensure the script path is correct. This command will allow users to easily apply common preferred settings to their user configuration.",
            "rules_filepaths_to_follow": "`internal/config/makefile_commands.mdc`",
            "filepaths_to_modify": "`Makefile`",
            "rest": "false"
        },
        {
            "status": "todo",
            "description": "Update README.md roadmap",
            "details": "Edit `README.md`. In the 'Roadmap' section, mark the following items as completed or update their status: '10 second timeout for Gemini API call is not enough for large diffs. Lets make it 30 seconds.' (now 15s for stream initiation), 'Check if there is a way to output not full commit message but rather token by token in console.', 'Remove verbose mode - it is not needed and complicates code', 'Add feature to send to fallback model if current model is down for a while'. Add a note about the new prompt enhancements and the Makefile command for user settings.",
            "rules_filepaths_to_follow": "`internal/config/md.mdc`",
            "filepaths_to_modify": "`README.md`",
            "rest": "true"
        }
    ]
}
